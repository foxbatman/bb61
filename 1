def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var37 = var5(arg2, arg1)
    var58 = var40(arg1, arg2)
    var62 = func12(var37, arg2)
    var63 = 95 & (708 - var37 - (var37 & 1634217958 | arg1 + arg2 ^ 109)) ^ arg2
    var64 = (var58 ^ var58) - arg2 | (var63 - arg1)
    var65 = ((((arg2 ^ (var64 + var64 + (arg2 + var62) + (((var64 - (-568125080 + (var63 | var64))) - var63 | 1925345252 + ((arg1 ^ var64) ^ var63) & var62) + arg1 ^ var62 - var58))) & arg2) + arg1) + var63) - var63
    result = -854391494 + arg1
    return result
def func11(arg41, arg42):
    var43 = (arg42 + arg41 | 700) ^ 924991279
    if var43 < arg42:
        var44 = (1244366379 | -896 | -341) & arg42
    else:
        var44 = var43 & -682 & arg41
    var45 = (arg42 ^ -444 ^ -728) ^ arg42
    var46 = 647 - -347570277
    var47 = (var46 | (arg41 ^ var46)) - arg41
    var48 = var43 - (arg41 ^ var45 + var43)
    var49 = var47 | 119
    var50 = (var46 & var43) & (var45 | var47)
    var51 = (var43 + var47 ^ var48) + var48
    var52 = (var50 ^ (-579 + var45)) ^ var47
    var53 = (-364422258 + var51) ^ var52 ^ -2139700026
    var54 = (var45 & -891) | var51 + var46
    var55 = var47 | var54 - var50 + arg42
    var56 = (var43 & arg41 | var45) - var43
    var57 = (var56 - var43) & (var54 | arg42)
    result = var45 - var46 | var50
    return result
def func10():
    closure = [-9]
    def func9(arg38, arg39):
        closure[0] += func11(arg38, arg39)
        return closure[0]
    func = func9
    return func
var40 = func10()
def func4(arg6, arg7):
    var8 = func7()
    var13 = func8(arg6, arg7)
    var14 = arg6 | -195
    if var13 < var14:
        var15 = var14 & arg6
    else:
        var15 = 19879035 - var8
    var16 = 627964581 & ((arg6 & arg6) | var14)
    var17 = (-297 & var8) + (var8 + arg6)
    var18 = var16 & (var13 & var14) - var17
    var19 = ((arg7 + var16) ^ 489) | var13
    var20 = var17 ^ var18
    var21 = var14 & (var16 | var17) - var8
    var22 = var8 | (var19 + var8 + -714)
    var23 = var18 & var14
    var24 = var18 | -118106747 ^ var18 & var16
    var25 = var19 + var20 & (var20 ^ var14)
    var26 = var14 & var20
    var27 = var19 & var13
    var28 = 784746824 | var26
    var29 = ((arg6 + var28) ^ var26) + 1816401202
    var30 = ((var16 & var20) - -683) - var14
    var31 = (752 ^ (var29 & var23)) ^ var22
    var32 = arg7 - var27
    var33 = (var23 | var28 - var29) | var27
    var34 = (var21 | (var17 | var24)) | 874
    var35 = (var14 & var16 - var23) + var32
    var36 = var8 + var34 - (var28 + var19)
    result = var36 + 367 - var19
    return result
def func8(arg9, arg10):
    var11 = 0
    for var12 in range(20):
        var11 += arg9 & (var12 + arg10)
    return var11
def func7():
    func5()
    result = len(range(33))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 9
def func3():
    closure = [-7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func12(arg59, arg60):
    def func13(acc, rest):
        var61 = 6 ^ acc
        if acc == 0:
            return var61
        else:
            result = func13(acc - 1, var61)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 66'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
